module NumberToLetter.DutchSpec (spec) where

import NumberToLetter.Dutch (numberToLetter)
import Test.Hspec

spec :: Spec
spec = do
    describe "Convert number to letter in Dutch" $ do
        it "numbers up to twenty are simple constants" $ do
            numberToLetter 0 `shouldBe` "nul"
            numberToLetter 1 `shouldBe` "een"
            numberToLetter 2 `shouldBe` "twee"
            numberToLetter 3 `shouldBe` "drie"
            numberToLetter 4 `shouldBe` "vier"
            numberToLetter 5 `shouldBe` "vijf"
            numberToLetter 6 `shouldBe` "zes"
            numberToLetter 7 `shouldBe` "zeven"
            numberToLetter 8 `shouldBe` "acht"
            numberToLetter 9 `shouldBe` "negen"
            numberToLetter 10 `shouldBe` "tien"
            numberToLetter 11 `shouldBe` "elf"
            numberToLetter 12 `shouldBe` "twaalf"
            numberToLetter 13 `shouldBe` "dertien"
            numberToLetter 14 `shouldBe` "veertien"
            numberToLetter 15 `shouldBe` "vijftien"
            numberToLetter 16 `shouldBe` "zestien"
            numberToLetter 17 `shouldBe` "zeventien"
            numberToLetter 18 `shouldBe` "achttien"
            numberToLetter 19 `shouldBe` "negentien"
        it "numbers up to a hundred have a word between words" $ do
            numberToLetter 20 `shouldBe` "twintig"
            numberToLetter 21 `shouldBe` "eenentwintig"
            numberToLetter 27 `shouldBe` "zevenentwintig"
            numberToLetter 29 `shouldBe` "negenentwintig"
            numberToLetter 30 `shouldBe` "dertig"
            numberToLetter 47 `shouldBe` "zevenenveertig"
            numberToLetter 51 `shouldBe` "eenenvijftig"
            numberToLetter 68 `shouldBe` "achtenzestig"
            numberToLetter 74 `shouldBe` "vierenzeventig"
            numberToLetter 84 `shouldBe` "vierentachtig"
            numberToLetter 99 `shouldBe` "negenennegentig"
        it "numbers ending in two or three have an accent" $ do
            numberToLetter 22 `shouldBe` "tweeëntwintig"
            numberToLetter 23 `shouldBe` "drieëntwintig"
            numberToLetter 32 `shouldBe` "tweeëndertig"
            numberToLetter 33 `shouldBe` "drieëndertig"
            numberToLetter 42 `shouldBe` "tweeënveertig"
            numberToLetter 43 `shouldBe` "drieënveertig"
            numberToLetter 52 `shouldBe` "tweeënvijftig"
            numberToLetter 53 `shouldBe` "drieënvijftig"
            numberToLetter 62 `shouldBe` "tweeënzestig"
            numberToLetter 63 `shouldBe` "drieënzestig"
            numberToLetter 72 `shouldBe` "tweeënzeventig"
            numberToLetter 73 `shouldBe` "drieënzeventig"
            numberToLetter 82 `shouldBe` "tweeëntachtig"
            numberToLetter 83 `shouldBe` "drieëntachtig"
            numberToLetter 92 `shouldBe` "tweeënnegentig"
            numberToLetter 93 `shouldBe` "drieënnegentig"
        it "numbers over a hundred have a space between words" $ do
            numberToLetter 100 `shouldBe` "honderd"
            numberToLetter 101 `shouldBe` "honderd een"
            numberToLetter 199 `shouldBe` "honderd negenennegentig"
            numberToLetter 200 `shouldBe` "tweehonderd"
            numberToLetter 202 `shouldBe` "tweehonderd twee"
            numberToLetter 300 `shouldBe` "driehonderd"
            numberToLetter 800 `shouldBe` "achthonderd"
            numberToLetter 999 `shouldBe` "negenhonderd negenennegentig"
            numberToLetter 1000 `shouldBe` "duizend"
            numberToLetter 2000 `shouldBe` "tweeduizend"
            numberToLetter 999999 `shouldBe` "negenhonderd negenennegentigduizend negenhonderd negenennegentig"
            numberToLetter 1000000 `shouldBe` "een miljoen"
            numberToLetter 2000000 `shouldBe` "twee miljoen"
            numberToLetter 1000000000 `shouldBe` "een miljard"
            numberToLetter 4000000000 `shouldBe` "vier miljard"
