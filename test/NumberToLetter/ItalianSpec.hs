module NumberToLetter.ItalianSpec (spec) where

import NumberToLetter.Italian (numberToLetter)
import Test.Hspec

spec :: Spec
spec = do
    describe "Convert number to letter in Italian" $ do
        it "numbers up to ten are simple constants" $ do
            numberToLetter 0 `shouldBe` "zero"
            numberToLetter 1 `shouldBe` "uno"
            numberToLetter 2 `shouldBe` "due"
            numberToLetter 3 `shouldBe` "tre"
            numberToLetter 4 `shouldBe` "quattro"
            numberToLetter 5 `shouldBe` "cinque"
            numberToLetter 6 `shouldBe` "sei"
            numberToLetter 7 `shouldBe` "sette"
            numberToLetter 8 `shouldBe` "otto"
            numberToLetter 9 `shouldBe` "nove"
            numberToLetter 10 `shouldBe` "dieci"
        it "numbers between eleven and sixteen have a common suffix" $ do
            numberToLetter 11 `shouldBe` "undici"
            numberToLetter 12 `shouldBe` "dodici"
            numberToLetter 13 `shouldBe` "tredici"
            numberToLetter 14 `shouldBe` "quattordici"
            numberToLetter 15 `shouldBe` "quindici"
            numberToLetter 16 `shouldBe` "sedici"
        it "numbers between seventeen and nineteen have a common prefix" $ do
            numberToLetter 17 `shouldBe` "diciasette"
            numberToLetter 18 `shouldBe` "diciotto"
            numberToLetter 19 `shouldBe` "diciannove"
        it "smaller numbers have no space between words" $ do
            numberToLetter 20 `shouldBe` "venti"
            numberToLetter 22 `shouldBe` "ventidue"
            numberToLetter 30 `shouldBe` "trenta"
            numberToLetter 34 `shouldBe` "trentaquattro"
            numberToLetter 40 `shouldBe` "quaranta"
            numberToLetter 42 `shouldBe` "quarantadue"
            numberToLetter 45 `shouldBe` "quarantacinque"
            numberToLetter 50 `shouldBe` "cinquanta"
            numberToLetter 56 `shouldBe` "cinquantasei"
            numberToLetter 60 `shouldBe` "sessanta"
            numberToLetter 67 `shouldBe` "sessantasette"
            numberToLetter 70 `shouldBe` "settanta"
            numberToLetter 74 `shouldBe` "settantaquattro"
            numberToLetter 80 `shouldBe` "ottanta"
            numberToLetter 89 `shouldBe` "ottantanove"
            numberToLetter 90 `shouldBe` "novanta"
        it "tens lose their last vowel before another vowel" $ do
            numberToLetter 21 `shouldBe` "ventuno"
            numberToLetter 28 `shouldBe` "ventotto"
            numberToLetter 31 `shouldBe` "trentuno"
            numberToLetter 38 `shouldBe` "trentotto"
            numberToLetter 41 `shouldBe` "quarantuno"
            numberToLetter 48 `shouldBe` "quarantotto"
            numberToLetter 51 `shouldBe` "cinquantuno"
            numberToLetter 58 `shouldBe` "cinquantotto"
            numberToLetter 61 `shouldBe` "sessantuno"
            numberToLetter 68 `shouldBe` "sessantotto"
            numberToLetter 71 `shouldBe` "settantuno"
            numberToLetter 78 `shouldBe` "settantotto"
            numberToLetter 81 `shouldBe` "ottantuno"
            numberToLetter 88 `shouldBe` "ottantotto"
            numberToLetter 91 `shouldBe` "novantuno"
            numberToLetter 98 `shouldBe` "novantotto"
        it "compound numbers ending in three have an accent" $ do
            numberToLetter 23 `shouldBe` "ventitré"
            numberToLetter 33 `shouldBe` "trentatré"
            numberToLetter 43 `shouldBe` "quarantatré"
            numberToLetter 53 `shouldBe` "cinquantatré"
            numberToLetter 63 `shouldBe` "sessantatré"
            numberToLetter 73 `shouldBe` "settantatré"
            numberToLetter 83 `shouldBe` "ottantatré"
            numberToLetter 93 `shouldBe` "novantatré"
            numberToLetter 23000 `shouldBe` "ventitrémila"
        it "one is omitted before a hundred and a thousand" $ do
            numberToLetter 100 `shouldBe` "cento"
            numberToLetter 1000 `shouldBe` "mille"
            numberToLetter 1001 `shouldBe` "milleuno"
        it "hundreds have a common suffix" $ do
            numberToLetter 200 `shouldBe` "duecento"
            numberToLetter 300 `shouldBe` "trecento"
            numberToLetter 400 `shouldBe` "quattrocento"
            numberToLetter 500 `shouldBe` "cinquecento"
            numberToLetter 600 `shouldBe` "seicento"
            numberToLetter 700 `shouldBe` "settecento"
            numberToLetter 800 `shouldBe` "ottocento"
            numberToLetter 900 `shouldBe` "novecento"
        it "thousands are pluralized" $ do
            numberToLetter 2000 `shouldBe` "duemila"
            numberToLetter 3000 `shouldBe` "tremila"
            numberToLetter 4000 `shouldBe` "quattromila"
            numberToLetter 5000 `shouldBe` "cinquemila"
            numberToLetter 6000 `shouldBe` "seimila"
            numberToLetter 7000 `shouldBe` "settemila"
            numberToLetter 8000 `shouldBe` "ottomila"
            numberToLetter 9000 `shouldBe` "novemila"
        it "thousands over a hundred are followed by a space" $ do
            numberToLetter 2020 `shouldBe` "duemilaventi"
            numberToLetter 2345 `shouldBe` "duemilatrecentoquarantacinque"
            numberToLetter 765200 `shouldBe` "settecentosessantacinquemila duecento"
            numberToLetter 999666 `shouldBe` "novecentonovantanovemila seicentosessantasei"
        it "thousands ending with 00 are not followed by a space" $ do
            numberToLetter 100142 `shouldBe` "centomilacentoquarantadue"
            numberToLetter 600002 `shouldBe` "seicentomiladue"
        it "millions and billions are pluralized" $ do
            numberToLetter 1000000 `shouldBe` "un milione"
            numberToLetter 2000000 `shouldBe` "due milioni"
            numberToLetter 1000000000 `shouldBe` "un miliarde"
            numberToLetter 4000000000 `shouldBe` "quattro miliardi"
